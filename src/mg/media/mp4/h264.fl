
%pragma array=255

%.c{
#include "media_parser.h"
#include <math.h>

__ALX_BEGIN_NAMESPACE

/*
Parsing process for Exp-Golomb codes
*/
inline unsigned int exp_ue_golomb(IBitstream &var_bs)
{
   unsigned int b(0);

   int leadingZeroBits = -1;
   for( b = 0; !b; leadingZeroBits++ )
        b = var_bs.getbits( 1 );

   if(!leadingZeroBits)
       return 0;

   unsigned int trailer = var_bs.getbits(leadingZeroBits);
   unsigned int exp     = static_cast<int>(pow(2.0, leadingZeroBits));

   _ASSERTE(exp > 1);

   return exp - 1  + trailer;
}

inline int exp_se_golomb(IBitstream &var_bs)
{
     
    float k = static_cast<float>(exp_ue_golomb(var_bs));
    int   q = (static_cast<int>(k)) + 1;
	  q = static_cast<int>(pow(-1.0, q));
    return static_cast<int>(q*ceil(k/2));
   
    
}

%.c}

class hrd_parameters
{
    unsigned int cpb_cnt_minus1 = 0;
	unsigned int bit_rate_value_minus1[64];
	unsigned int cpb_size_value_minus1[64];

	%g{cpb_cnt_minus1  = exp_ue_golomb(var_bs);%g}
	unsigned int(4) bit_rate_scale;
	unsigned int(4) cpb_size_scale;

	unsigned int SchedSelIdx = 0;
	
	for( SchedSelIdx = 0; SchedSelIdx <= cpb_cnt_minus1; SchedSelIdx++ ) 
	{
	   %g{bit_rate_value_minus1[ SchedSelIdx ]  = exp_ue_golomb(var_bs);%g}
  	   %g{cpb_size_value_minus1[ SchedSelIdx ]  = exp_ue_golomb(var_bs);%g}
	   
	   unsigned int(1) cbr_flag;//[ SchedSelIdx ];
	}
	
	unsigned int(5) initial_cpb_removal_delay_length_minus1;
	unsigned int(5) cpb_removal_delay_length_minus1;
	unsigned int(5) dpb_output_delay_length_minus1;
	unsigned int(5) time_offset_length;
}



class vui_parameters
{
        unsigned int chroma_sample_loc_type_top_field = 0;
	unsigned int chroma_sample_loc_type_bottom_field = 0;
	unsigned int max_bytes_per_pic_denom = 0;
	unsigned int max_bits_per_mb_denom = 0;
	unsigned int log2_max_mv_length_horizontal = 0;
	unsigned int log2_max_mv_length_vertical = 0;
	unsigned int num_reorder_frames = 0;
	unsigned int max_dec_frame_buffering = 0;

	unsigned int(1) aspect_ratio_info_present_flag;
	if( aspect_ratio_info_present_flag ) {
		unsigned int(8) aspect_ratio_idc;
		if( aspect_ratio_idc == 255  ) {
			unsigned int(16) sar_width;
			unsigned int(16) sar_height;
		}
	}
	
	unsigned int(1) overscan_info_present_flag;
	if( overscan_info_present_flag )
		unsigned int(1) overscan_appropriate_flag;
	
	unsigned int(1) video_signal_type_present_flag;
	if( video_signal_type_present_flag ) {
		unsigned int(3) video_format;
		unsigned int(1) video_full_range_flag;
		unsigned int(1) colour_description_present_flag;
		if( colour_description_present_flag ) {
			unsigned int(8) colour_primaries;
			unsigned int(8) transfer_characteristics;
			unsigned int(8) matrix_coefficients;
		}
	}

	unsigned int(1) chroma_loc_info_present_flag;
	if( chroma_loc_info_present_flag ) {
		%g{chroma_sample_loc_type_top_field  = exp_ue_golomb(var_bs);%g}
		%g{chroma_sample_loc_type_bottom_field  = exp_ue_golomb(var_bs);%g}
	}
	unsigned int(1) timing_info_present_flag;
	if( timing_info_present_flag ) {
		unsigned int(32) num_units_in_tick;
		unsigned int(32) time_scale;
		
		//time_scale / num_units_in_tick = num of frames?

		unsigned int(1)  fixed_frame_rate_flag;
	}
	
	unsigned int(1) nal_hrd_parameters_present_flag;
	if( nal_hrd_parameters_present_flag )
		hrd_parameters HRD;
	unsigned int(1) vcl_hrd_parameters_present_flag;
	if( vcl_hrd_parameters_present_flag )
	{
	    hrd_parameters VLC_HRD;
	}
	
	if( nal_hrd_parameters_present_flag || vcl_hrd_parameters_present_flag )
	unsigned int(1) low_delay_hrd_flag;
	
	unsigned int(1) pic_struct_present_flag;
	unsigned int(1) bitstream_restriction_flag;
	
	if( bitstream_restriction_flag ) {

	unsigned int(1) motion_vectors_over_pic_boundaries_flag;
	
	%g{max_bytes_per_pic_denom  = exp_ue_golomb(var_bs);%g}
	%g{max_bits_per_mb_denom  = exp_ue_golomb(var_bs);%g}
	%g{log2_max_mv_length_horizontal  = exp_ue_golomb(var_bs);%g}
	%g{log2_max_mv_length_vertical  = exp_ue_golomb(var_bs);%g}
	%g{num_reorder_frames  = exp_ue_golomb(var_bs);%g}
	%g{max_dec_frame_buffering  = exp_ue_golomb(var_bs);%g}
	
	
	}
%{
public:
       vui_parameters():HRD(NULL),VLC_HRD(NULL){}
      ~vui_parameters()
      {
        //_ASSERTE(!HRD);
		if(HRD)      
          delete HRD;
        if(VLC_HRD)
          delete VLC_HRD;
      }
       
%}

}



class H264Sequence
{
  unsigned int log2_max_pic_order_cnt_lsb_minus4;


  unsigned int(8) profile_idc;
  unsigned int(1) constraint_set0_flag;
  unsigned int(1) constraint_set1_flag;
  unsigned int(1) constraint_set2_flag;
  unsigned int(1) constraint_set3_flag;
  unsigned int(4) reserved_zero_bits    = 0x0;
  unsigned int(8) level_idc;
  unsigned int    seq_parameter_set_id;  %g{seq_parameter_set_id = exp_ue_golomb(var_bs);%g}
  
  unsigned int chroma_format_idc = 0;
  unsigned int bit_depth_luma;   
  unsigned int bit_depth_chroma;

  unsigned int frame_crop_left_offset;   
  unsigned int frame_crop_right_offset;  
  unsigned int frame_crop_top_offset;    
  unsigned int frame_crop_bottom_offset; 
  
  unsigned int offset_for_non_ref_pic = 0;         
  unsigned int offset_for_top_to_bottom_field = 0; 
  unsigned int num_ref_frames_in_pic_order_cnt_cycle = 0;
	

  if(profile_idc >= 100)
  { //high profile

      %g{chroma_format_idc    = exp_ue_golomb(var_bs);%g}
     if(chroma_format_idc == 3)
     {
        unsigned int(1) residual_color_transform_flag;
     }
       %g{bit_depth_luma      = exp_ue_golomb(var_bs) ;%g}
       %g{bit_depth_chroma    = exp_ue_golomb(var_bs);%g}
        unsigned int(1) transform_bypass;

	unsigned int(1) decode_scaling_matrix = 0;//if 1 TODO
     
  }

   unsigned int log2_max_frame_num_minus4;        %g{log2_max_frame_num_minus4 = exp_ue_golomb(var_bs) ;%g}
   unsigned int pic_order_cnt_type = 0;		  %g{pic_order_cnt_type        = exp_ue_golomb(var_bs);%g}
   if(pic_order_cnt_type == 0)
   {
      %g{log2_max_pic_order_cnt_lsb_minus4 = exp_ue_golomb(var_bs);%g}
   }else if(pic_order_cnt_type == 1)
   {
	unsigned int(1) delta_pic_order_always_zero_flag;
	
	%g{offset_for_non_ref_pic = exp_se_golomb(var_bs);%g}
	%g{offset_for_top_to_bottom_field = exp_se_golomb(var_bs);%g}
	%g{num_ref_frames_in_pic_order_cnt_cycle = exp_ue_golomb(var_bs);%g}

	unsigned int __i = 0;
	for(__i = 0; __i < num_ref_frames_in_pic_order_cnt_cycle; __i++)
	{
	     unsigned int offset_for_ref_frame; 
	     %g{
	     offset_for_ref_frame = exp_se_golomb(var_bs);
	     %g}

		 %p{
			 offset_for_ref_frame = 0;
		 %p}
	}
   }

	unsigned int num_ref_frames;   %g{num_ref_frames = exp_ue_golomb(var_bs);%g}
	unsigned int(1) gaps_in_frame_num_value_allowed_flag;
	unsigned int pic_width_in_mbs_minus1;%g{pic_width_in_mbs_minus1 = exp_ue_golomb(var_bs);%g}
	unsigned int pic_height_in_map_units_minus1;%g{pic_height_in_map_units_minus1 = exp_ue_golomb(var_bs);%g}
	unsigned int(1) frame_mbs_only_flag;
	if(!frame_mbs_only_flag)
	  unsigned int(1) mb_adaptive_frame_field_flag;
	unsigned int(1) direct_8x8_inference_flag;
	unsigned int(1) frame_cropping_flag;
	if(frame_cropping_flag){
		%g{frame_crop_left_offset   = exp_ue_golomb(var_bs);%g}
		%g{frame_crop_right_offset  = exp_ue_golomb(var_bs);%g}
		%g{frame_crop_top_offset    = exp_ue_golomb(var_bs);%g}
		%g{frame_crop_bottom_offset = exp_ue_golomb(var_bs);%g}
	}
	unsigned int(1) vui_parameters_present_flag;


        //---------------VUI PARAMETERS-------------------//


	if(vui_parameters_present_flag)
	{
	
		vui_parameters VUI;

	}

	///////////rbsp_trailing_bits( )//////
	unsigned int(1) rbsp_stop_one_bit = 1;
	unsigned int skip = numbits()%8;
	if(skip)
    {skipbits(8-skip);}

%{
public:
	 H264Sequence():
		  VUI(NULL)
		, mb_adaptive_frame_field_flag(0)
	 {}
	~H264Sequence(){if(VUI){delete VUI;}}
%}
   
}

class pic_parameter_set_rbsp   
{
	unsigned int pic_parameter_set_id = 0;
	unsigned int seq_parameter_set_id = 0;
	unsigned int num_slice_groups_minus1 = 0;
	unsigned int slice_group_map_type = 0;
	unsigned int run_length_minus1[64];
	unsigned int top_left[64];
	unsigned int bottom_right[64];
	unsigned int slice_group_change_rate_minus1 = 0;
	unsigned int pic_size_in_map_units_minus1 = 0;
	unsigned int slice_group_id[64];
	unsigned int num_ref_idx_l0_active_minus1 = 0;
	unsigned int num_ref_idx_l1_active_minus1 = 0;
	         int pic_init_qp_minus26 = 0;
	         int pic_init_qs_minus26 = 0;
	         int chroma_qp_index_offset = 0;
			 int second_chroma_qp_index_offset = 0;

	unsigned int start_size = numbits();

		%g{pic_parameter_set_id  = exp_ue_golomb(var_bs);%g}
		%g{seq_parameter_set_id  = exp_ue_golomb(var_bs);%g}
	
	unsigned int(1) entropy_coding_mode_flag;
	unsigned int(1) pic_order_present_flag;
	
	%g{num_slice_groups_minus1  = exp_ue_golomb(var_bs);%g}
	
	if( num_slice_groups_minus1 > 0 ) {
		%g{slice_group_map_type  = exp_ue_golomb(var_bs);%g}
	        unsigned int iGroup = 0;
		if( slice_group_map_type == 0 )
		{
			for( iGroup = 0; iGroup <= num_slice_groups_minus1; iGroup++ )
			%g{run_length_minus1[ iGroup ]  = exp_ue_golomb(var_bs);%g}
		}
	        else if( slice_group_map_type == 2 )
	        {
			for( iGroup = 0; iGroup < num_slice_groups_minus1; iGroup++ ) {
			%g{top_left[ iGroup ]  = exp_ue_golomb(var_bs);%g}
			%g{bottom_right[ iGroup ]  = exp_ue_golomb(var_bs);%g}
			}
	       }
	       else if( slice_group_map_type == 3 ||
	                slice_group_map_type == 4 ||
	                slice_group_map_type == 5 ) {

			unsigned int(1) slice_group_change_direction_flag;
			%g{slice_group_change_rate_minus1  = exp_ue_golomb(var_bs);%g}
	       } 
	       else if( slice_group_map_type == 6 ) {
			%g{pic_size_in_map_units_minus1  = exp_ue_golomb(var_bs);%g}
			unsigned int i = 0;
			for( i = 0; i <= pic_size_in_map_units_minus1; i++ )
			{
			
			%g{_ASSERTE(false);slice_group_id[ i ]  = exp_ue_golomb(var_bs);%g}
			}
	       }
	}

	%g{num_ref_idx_l0_active_minus1  = exp_ue_golomb(var_bs);%g}
	%g{num_ref_idx_l1_active_minus1  = exp_ue_golomb(var_bs);%g}
	
	unsigned int(1) weighted_pred_flag;
	unsigned int(2) weighted_bipred_idc;

	
	
	%g{pic_init_qp_minus26  = exp_se_golomb(var_bs);%g}
	%g{pic_init_qs_minus26  = exp_se_golomb(var_bs);%g}
	%g{chroma_qp_index_offset  = exp_se_golomb(var_bs);%g}
	
	unsigned int(1) deblocking_filter_control_present_flag;
	unsigned int(1) constrained_intra_pred_flag;
	unsigned int(1) redundant_pic_cnt_present_flag;

	
	/////extended///////
	unsigned int end_size = numbits() + (numbits() % 8);
	unsigned int extended = 0;

	%g{ if(_size && 
	             ( ( (end_size) - start_size) / 8) < _size
			) 
			extended = 1;
	%g}

	
	if(extended)
	{
		unsigned int(1) transform_8x8_mode_flag;
		unsigned int(1) pic_scaling_matrix_present_flag;
		
		if(pic_scaling_matrix_present_flag)
		{
		    unsigned int i = 0;
			unsigned int itime = (6 + 2 * transform_8x8_mode_flag);
		    for( i = 0 ; i < itime; i++ )
            {
                unsigned int(1) pic_scaling_list_present_flag;
                if( pic_scaling_list_present_flag )
                {
                    if( i < 6 )
                    {
						%g{
						  unsigned int j = 0;
						   for(j = 0; j < 16; j++)
						     exp_se_golomb(var_bs);
						%g}
                        
                    }
                    else
                    {
                        %g{
						  unsigned int j = 0;
						   for(j = 0; j < 64; j++)
						     exp_se_golomb(var_bs);
						%g}
                    }
                }
            }

		}

		
		%g{second_chroma_qp_index_offset  = exp_se_golomb(var_bs);%g}

		
	}

	///////////rbsp_trailing_bits( )//////
	unsigned int(1) rbsp_stop_one_bit = 1;
	unsigned int skip = numbits() % 8;
	
	if(skip)
	{
	   
		skipbits(8-skip);
	}
	
%{
	unsigned int _size;
public:
	 pic_parameter_set_rbsp():_size(0){}
	 pic_parameter_set_rbsp(unsigned int size):_size(size){}
	
%}
}

class ref_pic_list_reordering(unsigned int slice_type)  
{

	unsigned int t = 1;
	
	unsigned int reordering_of_pic_nums_idc = 0;
	unsigned int abs_diff_pic_num_minus1 = 0;
	unsigned int long_term_pic_num = 0;

	if( slice_type != 2 && slice_type != 9 )
	{
		unsigned int(1) ref_pic_list_reordering_flag_l0;
        
		if( ref_pic_list_reordering_flag_l0 )
		{
		   while(t)//always true
		   {
			 %g{reordering_of_pic_nums_idc = exp_ue_golomb(var_bs);%g}
		       if( reordering_of_pic_nums_idc == 0 ||
			   reordering_of_pic_nums_idc == 1 )
		       {
			      %g{abs_diff_pic_num_minus1  = exp_ue_golomb(var_bs);%g}
		       }
		       else if( reordering_of_pic_nums_idc == 2 )
		       {
				%g{long_term_pic_num  = exp_ue_golomb(var_bs);%g}
		       }

		       if( reordering_of_pic_nums_idc ==3)
		       	break;

		    } 
		}
	}

	if( slice_type == 1 ) 
	{
		unsigned int(1) ref_pic_list_reordering_flag_l1;
		if( ref_pic_list_reordering_flag_l1 )
			
			while(t)//always true
			{
				%g{reordering_of_pic_nums_idc  = exp_ue_golomb(var_bs);%g}
				if( reordering_of_pic_nums_idc == 0 ||
				    reordering_of_pic_nums_idc == 1 )
				{
					%g{abs_diff_pic_num_minus1  = exp_ue_golomb(var_bs);%g}
				}
				else if( reordering_of_pic_nums_idc == 2 )
				{
					%g{long_term_pic_num  = exp_ue_golomb(var_bs);%g}
				}

			  if(reordering_of_pic_nums_idc == 3)
			  	break;
			} 
	}	

   
}


class pred_weight_table(unsigned int num_ref_idx_l0_active_minus1, unsigned int num_ref_idx_l1_active_minus1, unsigned int slice_type)   
{
	
	unsigned int luma_log2_weight_denom = 0;
        unsigned int chroma_log2_weight_denom = 0;
         int luma_weight_l0[255];
         int luma_offset_l0[255];
         int luma_weight_l1[255];
         int luma_offset_l1[255];

	 int chroma_weight_l0[255];
         int chroma_offset_l0[255];
         int chroma_weight_l1[255];
         int chroma_offset_l1[255];

	 unsigned int i = 0;
	 unsigned int j = 0;

       

	%g{luma_log2_weight_denom    = exp_ue_golomb(var_bs);%g}
	%g{chroma_log2_weight_denom  = exp_ue_golomb(var_bs);%g}

	
	for( i = 0; i <= num_ref_idx_l0_active_minus1; i++ ) {
               unsigned int(1) luma_weight_l0_flag;
               if( luma_weight_l0_flag ) {
                    %g{luma_weight_l0[ i ]  = exp_se_golomb(var_bs);%g}
                    %g{luma_offset_l0[ i ]  = exp_se_golomb(var_bs);%g}
               }
               unsigned int(1) chroma_weight_l0_flag;
               if( chroma_weight_l0_flag )
                     for( j =0; j < 2; j++ ) {
                        %g{chroma_weight_l0[ j ]  = exp_se_golomb(var_bs);%g}
                        %g{chroma_offset_l0[ j ]  = exp_se_golomb(var_bs);%g}
                      }
       }

       
       if( slice_type == 1 )
		for( i = 0; i <= num_ref_idx_l1_active_minus1; i++ ) {
			unsigned int(1) luma_weight_l1_flag;
			if( luma_weight_l1_flag ) {
				%g{luma_weight_l1[ i ]  = exp_se_golomb(var_bs);%g}
				%g{luma_offset_l1[ i ]  = exp_se_golomb(var_bs);%g}
			}
			unsigned int(1) chroma_weight_l1_flag;
			if( chroma_weight_l1_flag )
				for( j = 0; j < 2; j++ ) {
					%g{chroma_weight_l1[ j ]  = exp_se_golomb(var_bs);%g}
					%g{chroma_offset_l1[ j ]  = exp_se_golomb(var_bs);%g}
				}
		}
   
}

class dec_ref_pic_marking(unsigned int nal_unit_type) 
{


	unsigned int memory_management_control_operation = 0;
	unsigned int difference_of_pic_nums_minus1 = 0;
	unsigned int long_term_pic_num = 0;
	unsigned int long_term_frame_idx = 0;
	unsigned int max_long_term_frame_idx_plus1 = 0;

	int t = 1;

	if( nal_unit_type == 5 ) {
		unsigned int(1) no_output_of_prior_pics_flag;
		unsigned int(1) long_term_reference_flag;
	} else {
		unsigned int(1) adaptive_ref_pic_marking_mode_flag;
		if( adaptive_ref_pic_marking_mode_flag )
			
			while(t)//always true
			{
				%g{memory_management_control_operation  = exp_ue_golomb(var_bs);%g}
				if( memory_management_control_operation == 1 ||
				    memory_management_control_operation == 3 )
                                {
				    %g{difference_of_pic_nums_minus1  = exp_ue_golomb(var_bs);%g}
				}
				
				if(memory_management_control_operation == 2 )
				{
					%g{long_term_pic_num  = exp_ue_golomb(var_bs);%g}
				}

				if(memory_management_control_operation == 3 ||
				   memory_management_control_operation == 6 )
				{
					%g{long_term_frame_idx  = exp_ue_golomb(var_bs);%g}
				}

				if(memory_management_control_operation == 4 )
				{%g{max_long_term_frame_idx_plus1  = exp_ue_golomb(var_bs);%g}}
			
				if(memory_management_control_operation == 0 )
				     break;
			}
	}
}



class slice_header   
{
%{
	void reset(){

	if(_p_rif) {delete _p_rif;}_p_rif   = NULL;
	if(_p_pwt) {delete _p_pwt;}_p_pwt   = NULL;
	if(_p_mark){delete _p_mark;}_p_mark = NULL;

	}
	
        //INFORMATION NEEDED FOR PARSING
	//NAL
	unsigned int __nal_unit_type;
	unsigned int __nal_ref_idc;
	//SPS
        unsigned int __log2_max_frame_num_minus4;
	unsigned int __frame_mbs_only_flag;
	unsigned int __pic_order_cnt_type;
	unsigned int __log2_max_pic_order_cnt_lsb_minus4;
	unsigned int __delta_pic_order_always_zero_flag;
	//PPS
	unsigned int __pic_order_present_flag;
	unsigned int __redundant_pic_cnt_present_flag;
	unsigned int __weighted_pred_flag;
        unsigned int __weighted_bipred_idc;
	unsigned int __entropy_coding_mode_flag;
	unsigned int __deblocking_filter_control_present_flag;
	unsigned int __num_slice_groups_minus1;
	unsigned int __slice_group_map_type ;
	unsigned int __slice_group_change_rate_minus1;
	unsigned int __pic_size_in_map_units_minus1;
%}
        
	//INFORMATION NEEDED FOR PARSING
	unsigned int frame_mbs_only_flag           = 0;
	unsigned int nal_unit_type                 = 0;
	

	unsigned int first_mb_in_slice             = 0;
	unsigned int slice_type                    = 0;
	unsigned int pic_parameter_set_id          = 0;
	unsigned int frame_num                     = 0;
	unsigned int idr_pic_id                    = 0;
	unsigned int pic_order_cnt_lsb             = 0;
         	 int delta_pic_order_cnt_bottom    = 0;
         	 int delta_pic_order_cnt[255];
         	 //int delta_pic_order_cnt[255];
	unsigned int redundant_pic_cnt             = 0;
	unsigned int num_ref_idx_l0_active_minus1  = 0;
	unsigned int num_ref_idx_l1_active_minus1  = 0;
	unsigned int cabac_init_idc = 0;
          	 int slice_qp_delta = 0;
         	 int slice_qs_delta = 0;
	unsigned int disable_deblocking_filter_idc = 0;
         	 int slice_alpha_c0_offset_div2    = 0;
         	 int slice_beta_offset_div2        = 0;
	unsigned int slice_group_change_cycle      = 0;


	%g{reset();%g}

	%g{frame_mbs_only_flag   = __frame_mbs_only_flag; %g}
	%g{nal_unit_type         = __nal_unit_type;       %g}


	%g{first_mb_in_slice     = exp_ue_golomb(var_bs);%g}
	%g{slice_type            = exp_ue_golomb(var_bs);%g}
	%g{pic_parameter_set_id  = exp_ue_golomb(var_bs);%g}
	%g{frame_num             = var_bs.getbits(__log2_max_frame_num_minus4 + 4);%g}


	if( !frame_mbs_only_flag ) {
		unsigned int(1) field_pic_flag;
			    if( field_pic_flag )
                               unsigned int(1) bottom_field_flag;
        }

       %g{if( __nal_unit_type == 5 )
             idr_pic_id  = exp_ue_golomb(var_bs);%g}

       %g{

      if( __pic_order_cnt_type == 0 ) 
      {
             pic_order_cnt_lsb  = var_bs.getbits(__log2_max_pic_order_cnt_lsb_minus4 + 4);

           if( __pic_order_present_flag && !field_pic_flag )
               delta_pic_order_cnt_bottom  = exp_se_golomb(var_bs);
      }

      if( __pic_order_cnt_type == 1 && ! __delta_pic_order_always_zero_flag ) {
          delta_pic_order_cnt[0]  = exp_se_golomb(var_bs);
      	if( __pic_order_present_flag && !field_pic_flag )
         	delta_pic_order_cnt[1]  = exp_se_golomb(var_bs);
      }

      if( __redundant_pic_cnt_present_flag )
          redundant_pic_cnt  = exp_ue_golomb(var_bs);
      
      %g}

      if( slice_type == 1 ) /*B*/
         unsigned int(1) direct_spatial_mv_pred_flag;

      if( slice_type == 0 || slice_type == 3 || slice_type == 1 ) /* P || SP || B */
      {
	unsigned int(1) num_ref_idx_active_override_flag;
        
		%g{if( num_ref_idx_active_override_flag ) {
			num_ref_idx_l0_active_minus1  = exp_ue_golomb(var_bs);
			if( slice_type == 1 ) /*B*/
				num_ref_idx_l1_active_minus1  = exp_ue_golomb(var_bs);
		
		}%g}
      }



      //TODO: DEBUG AND CORRECT
      %g{return var_ret;%g}

      ref_pic_list_reordering _p_rif(slice_type);
      %g{
      
     

      if((__weighted_pred_flag && ( slice_type == 0 || slice_type == 8 ) ) ||
		( __weighted_bipred_idc == 1 && slice_type == 1 ) )%g}
		{
			pred_weight_table _p_pwt(num_ref_idx_l0_active_minus1, num_ref_idx_l1_active_minus1, slice_type);
		
		}

	%g{if( __nal_ref_idc != 0 )%g}
	{
	    dec_ref_pic_marking _p_mark(nal_unit_type);
	}

	%g{

	if( __entropy_coding_mode_flag && slice_type != 0 && slice_type != 3 )
	{cabac_init_idc  = exp_ue_golomb(var_bs);}

	slice_qp_delta  = exp_se_golomb(var_bs)
	;%g}
		
		if( slice_type == 8 || slice_type == 9 ) {
			if( slice_type == 8 )
				unsigned int(1) sp_for_switch_flag;

			%g{slice_qs_delta  = exp_se_golomb(var_bs);%g}

		}

	%g{
	
	if( __deblocking_filter_control_present_flag ) {
           disable_deblocking_filter_idc  = exp_ue_golomb(var_bs);
           if( disable_deblocking_filter_idc != 1 ) {
             slice_alpha_c0_offset_div2  = exp_se_golomb(var_bs);
           slice_beta_offset_div2  = exp_se_golomb(var_bs);
	   }
	}

	if( __num_slice_groups_minus1	 > 0 &&
            __slice_group_map_type >= 3 && __slice_group_map_type <= 5)
	   slice_group_change_cycle  = var_bs.getbits(
	     static_cast<short>(
			   ceil(log(((double)
				   (
	   			(__pic_size_in_map_units_minus1 + 1) / 
				(__slice_group_change_rate_minus1 + 1)
				+ 1
				   )
				   )))
			)
	       );
	 
	%g}

%{
    slice_header(unsigned int sps_log2_max_frame_num_minus4
               , unsigned int sps_frame_mbs_only_flag
	       , unsigned int nal_nal_unit_type
	       , unsigned int nal_nal_ref_idc
	       , unsigned int sps_pic_order_cnt_type
	       , unsigned int sps_log2_max_pic_order_cnt_lsb_minus4
	       , unsigned int pps_pic_order_present_flag
	       , unsigned int sps_delta_pic_order_always_zero_flag
	       , unsigned int pps_redundant_pic_cnt_present_flag
	       , unsigned int pps_weighted_pred_flag
               , unsigned int pps_weighted_bipred_idc
	       , unsigned int pps_entropy_coding_mode_flag
	       , unsigned int pps_deblocking_filter_control_present_flag
	       , unsigned int pps_num_slice_groups_minus1
               , unsigned int pps_slice_group_map_type 
	       , unsigned int pps_slice_group_change_rate_minus1
	       , unsigned int pps_pic_size_in_map_units_minus1
	):
          __log2_max_frame_num_minus4(sps_log2_max_frame_num_minus4)
	, __frame_mbs_only_flag(sps_frame_mbs_only_flag)
	, __nal_unit_type(nal_nal_unit_type)
	, __nal_ref_idc(nal_nal_ref_idc)
	, __pic_order_cnt_type(sps_pic_order_cnt_type)
	, __log2_max_pic_order_cnt_lsb_minus4(sps_log2_max_pic_order_cnt_lsb_minus4)
	, __pic_order_present_flag(pps_pic_order_present_flag)
	, __delta_pic_order_always_zero_flag(sps_delta_pic_order_always_zero_flag)
	, __redundant_pic_cnt_present_flag(pps_redundant_pic_cnt_present_flag)
	, __weighted_pred_flag(pps_weighted_pred_flag)
	, __weighted_bipred_idc(pps_weighted_bipred_idc)
	, __entropy_coding_mode_flag(pps_entropy_coding_mode_flag)
	, __deblocking_filter_control_present_flag(pps_deblocking_filter_control_present_flag)
	, __num_slice_groups_minus1(pps_num_slice_groups_minus1)
	, __slice_group_map_type(pps_slice_group_map_type) 
	, __slice_group_change_rate_minus1(pps_slice_group_change_rate_minus1)
	, __pic_size_in_map_units_minus1(pps_pic_size_in_map_units_minus1)
	, _p_rif(NULL)
	, _p_pwt(NULL)
	, _p_mark(NULL)
    {}

    slice_header(const H264Sequence & sps
               , const pic_parameter_set_rbsp & pps
	       , unsigned int nal_nal_unit_type
	       , unsigned int nal_nal_ref_idc
	):
          __log2_max_frame_num_minus4(sps.log2_max_frame_num_minus4)
	, __frame_mbs_only_flag(sps.frame_mbs_only_flag)
	, __nal_unit_type(nal_nal_unit_type)
	, __nal_ref_idc(nal_nal_ref_idc)
	, __pic_order_cnt_type(sps.pic_order_cnt_type)
	, __log2_max_pic_order_cnt_lsb_minus4(sps.log2_max_pic_order_cnt_lsb_minus4)
	, __pic_order_present_flag(pps.pic_order_present_flag)
	, __delta_pic_order_always_zero_flag(sps.delta_pic_order_always_zero_flag)
	, __redundant_pic_cnt_present_flag(pps.redundant_pic_cnt_present_flag)
	, __weighted_pred_flag(pps.weighted_pred_flag)
	, __weighted_bipred_idc(pps.weighted_bipred_idc)
	, __entropy_coding_mode_flag(pps.entropy_coding_mode_flag)
	, __deblocking_filter_control_present_flag(pps.deblocking_filter_control_present_flag)
	, __num_slice_groups_minus1(pps.num_slice_groups_minus1)
	, __slice_group_map_type(pps.slice_group_map_type) 
	, __slice_group_change_rate_minus1(pps.slice_group_change_rate_minus1)
	, __pic_size_in_map_units_minus1(pps.pic_size_in_map_units_minus1)
          
	, _p_rif(NULL)
	, _p_pwt(NULL)
	, _p_mark(NULL)
    {}

    ~slice_header(){reset();}
%}
   
}

class sei_message
{
   int payloadType = 0;
   while(nextbits(8) == 0xFF){
     char(8) ff_byte;
     payloadType += 255;
     }
     
   unsigned int(8) last_payload_type_byte;
   payloadType += last_payload_type_byte;
   
   int payloadSize = 0;
   while(nextbits(8) == 0xFF){
     char(8) ff_byte;
     payloadSize += 255;
     }
     
   unsigned int(8) last_payload_size_byte;
   payloadSize += last_payload_size_byte;
}




class pic_timing(const H264Sequence sequence)
{
	unsigned int cpb_removal_delay = 0;
    unsigned int dpb_output_delay = 0;
    unsigned int time_offset = 0;
    
    unsigned int CpbDpbDelaysPresentFlag = 0;
    unsigned int time_offset_length = 0;
            
    unsigned int cpb_removal_delay_length = 0;
    unsigned int dpb_output_delay_length  = 0;
    unsigned int pic_struct_present_flag  = 0;
    unsigned int NumClockTS = 0;
            
            
        %g{    
            if(sequence->VUI->nal_hrd_parameters_present_flag)
                  CpbDpbDelaysPresentFlag = 1;
                  
            if(sequence->VUI->vcl_hrd_parameters_present_flag)
                  CpbDpbDelaysPresentFlag = 1;
                  
            if(sequence->VUI->HRD)
            {
                  time_offset_length = sequence->VUI->HRD->time_offset_length;
                  cpb_removal_delay_length  = sequence->VUI->HRD->cpb_removal_delay_length_minus1 + 1;
                  dpb_output_delay_length  = sequence->VUI->HRD->dpb_output_delay_length_minus1 + 1;
            }              
                  
                  
           pic_struct_present_flag = sequence->VUI->pic_struct_present_flag;
           
         %g}
                  

   
    if( CpbDpbDelaysPresentFlag ) {     
		%g{cpb_removal_delay  = var_bs.getbits(cpb_removal_delay_length);%g}
		%g{dpb_output_delay   = var_bs.getbits(dpb_output_delay_length);%g}
	}    
	
	
	
  
  if( pic_struct_present_flag ) {     
     unsigned int(4) pic_struct;
     
      
	
		%g{
			 switch( pic_struct ){
			    case 0:
			    case 1:
			    case 2:
			       NumClockTS = 1;
			       break;
			    
			    case 3:
			    case 4:
			    case 7:
			       NumClockTS = 2;
			       break;
			       
			   case 5:
			   case 6:
			   case 8:
			       NumClockTS = 3;
			       break;
			       
			    
			    
			 }
		%g}
		
	unsigned int i = 0;
     
    for( i = 0; i < NumClockTS ; i++ ) {     
      unsigned int(1) clock_timestamp_flag[[i]];

      if( clock_timestamp_flag[i] ) {     
         unsigned int(2) ct_type[[i]];
		 unsigned int(1) nuit_field_based_flag[[i]];
		 unsigned int(5) counting_type[[i]];
         unsigned int(1) full_timestamp_flag[[i]];
         unsigned int(1) discontinuity_flag[[i]];
         unsigned int(1) cnt_dropped_flag[[i]];
         unsigned int(8) n_frames[[i]];
      
      if( full_timestamp_flag[i] ) {     
		unsigned int(6) seconds_value[[i]];
		unsigned int(6) minutes_value[[i]];
		unsigned int(5) hours_value[[i]];
      } else {     
			unsigned int(1) seconds_flag[[i]];
      if( seconds_flag ) {     
			unsigned int(6) seconds_value[[i]];
            unsigned int(1) minutes_flag[[i]];
           if( minutes_flag ) {     
               unsigned int(6) minutes_value[[i]];
               unsigned int(1) hours_flag[[i]];
              if( hours_flag )     
                  unsigned int(5) hours_value[[i]];
            }     
          }     
        }     
        
        if( time_offset_length > 0 )     
          %g{time_offset  = var_bs.getbits(time_offset_length);%g}
      }     
    }     
  } 
  
    
} 

   


%{
__ALX_END_NAMESPACE
%}