
# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master
    - dev 
    - dev-win
  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
skip_tags: false

# Start builds on tags only (GitHub and BitBucket)
skip_non_tags: false

# Skipping commits with particular message or from specific user
#skip_commits:
#  message: /.*skip ci.*/      # Regex for matching commit message
#  author: John                                      # Commit author's username, name, email or regexp maching one of these.

# Including commits with particular message or from specific user
#only_commits:
#  message: /build/                # Start a new build if message contains 'build'
#  author: jack@company.com        # Start a new build for commit of user with email jack@company.com

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
#skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: 
  - Visual Studio 2015
  - Ubuntu

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# clone directory
#clone_folder: c:\projects\myproject

# fetch repository as zip archive
#shallow_clone: true                 # default is "false"

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined

# setting up etc\hosts file
hosts:
  queue-server: 127.0.0.1
  db.server.com: 127.0.0.2

# environment variables
environment:
  APPVEYOR_YML_DISABLE_PS_LINUX: true
  MG_TOKEN:
    secure: LRFLcOTdHrSzJ4bTkjmgBbrtKXAvwayzeu1mv56UERsM3wvZqDX2jNxOTKKScHrb
  MP4_TOKEN:
    secure: CRpaujBNT3qH2TEm2kWITtlrZrdt68sezFvp32CcVI+zb8pGTKjLP81r5E0c3w2e
  GH_TOKEN:
    secure: RspSF6tUWqsRj3dFIAPknfrr3wyRnfLc1SZV6Vvny8/bqEtSIWHEvHyNFDSUh/HB
  GH_U:
    secure: DhrGIHb1DmF/B2DLxvmVMA==
# environment:
#  global:
#    connection_string: server=12;password=13;
#    service_url: https://127.0.0.1:8090
#
#  matrix:
#  - db: mysql
#    provider: mysql
#
#  - db: mssql
#    provider: mssql
#    password:
#      secure: $#(JFDA)jQ@#$

# this is how to allow failing jobs in the matrix
#matrix:


# build cache to preserve files/folders between builds
#cache:
  #- packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified


# enable service required for build/tests
services:
  - docker
#  - iis                 # start IIS


# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  - cmd: choco install python2
   # to run script as a PowerShell command prepend it with ps:
  - git submodule update --init --recursive
  #- ps: if(-not (test-path gyp)){git clone https://chromium.googlesource.com/external/gyp.git gyp}
  - git clone https://chromium.googlesource.com/external/gyp.git gyp
  #- ps: $l = gl;cd ./test;python ../gyp/gyp_main.py mgtest.gyp --depth=. -Duv_library=static_library "-Dtarget_arch=ia32" -I../deps/libuv/common.gypi;set-location $l;
  - ps: python ./version.py
  - ps: echo "-->$($env:platform)<--"





#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform:
    - Win32 
    - x64

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

build:
  parallel: true                  # enable MSBuild parallel builds
  project: mg.msbuild.proj        # path to Visual Studio solution or project

  # MSBuild verbosity level normal / detailed
  verbosity: normal


# scripts to run before build
before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages
# , Azure Cloud Services)
before_package:

# scripts to run after build
after_build:
        - ps: 7z a "win-release-$($env:platform).zip" "./test/bin/$($env:platform)/Release/mg.exe" "./test/bin/$($env:platform)/Release/mg.pdb"; 

# to run your custom scripts instead of automatic MSBuild
build_script:
  - sh: docker build --build-arg ENV_CODECOV_MG=$MG_TOKEN --build-arg ENV_GITHUB_USER=$GH_U --build-arg ENV_GITHUB_TOKEN=$GH_TOKEN --build-arg ENV_CODECOV_MP4=$MP4_TOKEN -t mgi
# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test:
  

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
before_test:
 

# scripts to run after tests
after_test:

# to run your custom scripts instead of automatic tests
test_script:
  - ps: ./test/mgtest.ps1 -Configuration 'Release' -repeat 2 -arch "$env:platform"
  - ps: cd test
  - ps: python test_dash.py -k dash
  - ps: python test_dash.py -k hls
  - ps: python test_dash.py -k help

# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:
        - path: './test/bin/$(platform)/Release/mg.exe'
          name: mg.exe
        - path: './test/bin/$(platform)/Release/mg.pdb'
          name: mg.pdb
        - path: win-release-$(platform).zip
          name: win-release-$(platform)

 


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:

  

    # Deploy to GitHub Releases
  - provider: GitHub
    release: $(appveyor_repo_tag_name)
    artifact:  win-release-$(platform).zip 
    draft: true
    prerelease: true
    auth_token:
        secure: 9yjv22hRjZGOLHgfKr8Z23OYU1Rlz+JSaYxZ8gJlF77DopqYpeyqo5hpL95Aiwnf
    on:
     appveyor_repo_tag: true       # deploy on tag push only

   
  


# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  #- do something

# on build failure
on_failure:
 # - do something

# after build failure or success
on_finish:
  - ps: rm ".\bin\$env:platform\Release\*"


#---------------------------------#
#         notifications           #
#---------------------------------#

notifications:

  # Email
  - provider: Email
    to:
      - aseduto@hotmail.com
    subject: 'Build {{status}}'                  # optional
    message: "{{message}}, {{commitId}}, ..."    # optional
    on_build_status_changed: true

 


